name: Rollback Deployment

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment for rollback'
        required: true
        type: string
      target_version:
        description: 'Specific version to rollback to (optional)'
        required: false
        type: string
      trigger_reason:
        description: 'Reason for rollback trigger'
        required: false
        type: string
        default: 'manual'
      failed_version:
        description: 'Version that failed (for automatic rollbacks)'
        required: false
        type: string
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for rollback'
        required: true
        type: choice
        options:
          - staging
          - production
      target_version:
        description: 'Specific version to rollback to (leave empty for previous version)'
        required: false
        type: string
      dry_run:
        description: 'Perform dry run (preview changes without executing)'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: 'us-east-1'
  PROJECT_NAME: 'aws-infra-demo'

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  validate-rollback:
    name: Validate Rollback Request
    runs-on: ubuntu-latest
    outputs:
      can_rollback: ${{ steps.validation.outputs.can_rollback }}
      target_version: ${{ steps.validation.outputs.target_version }}
      target_sha: ${{ steps.validation.outputs.target_sha }}
      artifacts_bucket: ${{ steps.bucket-discovery.outputs.bucket_name }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions-Rollback-Validation
          aws-region: ${{ env.AWS_REGION }}

      - name: Discover artifacts bucket
        id: bucket-discovery
        run: |
          echo "üîç Discovering artifacts bucket for project: ${{ env.PROJECT_NAME }}"
          
          # Get current AWS account ID
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          echo "üìã Account ID: $ACCOUNT_ID"
          
          # Look for bucket with the expected naming pattern
          # Try to find buckets with the pattern: aws-infra-demo-artifacts-{account-id}-{run-id}
          BUCKET_PREFIX="${{ env.PROJECT_NAME }}-artifacts-${ACCOUNT_ID}"
          
          # List buckets and find the most recent artifacts bucket
          BUCKET_NAME=$(aws s3api list-buckets --query 'Buckets[?starts_with(Name, `'$BUCKET_PREFIX'`)].Name' --output text | sort | tail -1)
          
          if [[ -n "$BUCKET_NAME" ]]; then
            echo "‚úÖ Found artifacts bucket: $BUCKET_NAME"
            
            # Verify bucket has expected structure by checking for builds/ folder
            if aws s3 ls "s3://$BUCKET_NAME/builds/" &>/dev/null || aws s3 ls "s3://$BUCKET_NAME/deployments/" &>/dev/null; then
              echo "‚úÖ Bucket structure validated"
              echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Bucket found but missing expected structure (builds/ or deployments/ folders)"
              exit 1
            fi
          else
            echo "‚ùå No artifacts bucket found with prefix: $BUCKET_PREFIX"
            echo "Available buckets:"
            aws s3api list-buckets --query 'Buckets[].Name' --output text | tr '\t' '\n' | head -10
            exit 1
          fi

      - name: Validate rollback prerequisites
        id: validation
        run: |
          # Make scripts executable
          chmod +x scripts/*.sh
          
          # Check if environment is valid
          if [[ "${{ inputs.environment }}" != "staging" && "${{ inputs.environment }}" != "production" ]]; then
            echo "‚ùå Invalid environment: ${{ inputs.environment }}"
            exit 1
          fi
          
          # List available versions for rollback
          echo "üìã Available versions for rollback:"
          ./scripts/rollback.sh -e "${{ inputs.environment }}" --list
          
          # Determine target version
          if [[ -n "${{ inputs.target_version }}" ]]; then
            target_version="${{ inputs.target_version }}"
            echo "üéØ Using specified target version: $target_version"
          else
            # Get previous successful version
            export ARTIFACTS_BUCKET="${{ steps.bucket-discovery.outputs.bucket_name }}"
            target_info=$(./scripts/deployment-metadata.sh list -e "${{ inputs.environment }}" | grep "success" | head -2 | tail -1)
            if [[ -z "$target_info" ]]; then
              echo "‚ùå No previous successful deployment found for rollback"
              exit 1
            fi
            target_version=$(echo "$target_info" | awk '{print $1}')
            echo "üéØ Using previous successful version: $target_version"
          fi
          
          # Get target SHA from deployment metadata
          BUCKET_NAME="${{ steps.bucket-discovery.outputs.bucket_name }}"
          target_sha=$(aws s3 ls s3://$BUCKET_NAME/deployments/${{ inputs.environment }}/ --recursive | \
            grep "metadata-.*\.json" | \
            while read -r line; do
              key=$(echo "$line" | awk '{print $4}')
              metadata=$(aws s3 cp "s3://$BUCKET_NAME/$key" - 2>/dev/null || echo "{}")
              version=$(echo "$metadata" | jq -r '.version // "unknown"')
              if [[ "$version" == "$target_version" ]]; then
                echo "$metadata" | jq -r '.git_sha // "unknown"'
                break
              fi
            done | head -1)
          
          if [[ -z "$target_sha" || "$target_sha" == "unknown" ]]; then
            echo "‚ùå Could not find SHA for target version: $target_version"
            exit 1
          fi
          
          echo "‚úÖ Rollback validation passed"
          echo "can_rollback=true" >> $GITHUB_OUTPUT
          echo "target_version=$target_version" >> $GITHUB_OUTPUT
          echo "target_sha=$target_sha" >> $GITHUB_OUTPUT

  rollback-staging:
    name: Rollback Staging Environment
    runs-on: ubuntu-latest
    needs: validate-rollback
    if: inputs.environment == 'staging' && needs.validate-rollback.outputs.can_rollback == 'true'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions-Rollback-Staging
          aws-region: ${{ env.AWS_REGION }}

      - name: Execute rollback
        run: |
          chmod +x scripts/*.sh
          
          # Determine rollback flags
          rollback_flags="-e staging"
          
          if [[ -n "${{ needs.validate-rollback.outputs.target_version }}" ]]; then
            rollback_flags="$rollback_flags -v ${{ needs.validate-rollback.outputs.target_version }}"
          fi
          
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            rollback_flags="$rollback_flags --dry-run"
            echo "üîç Performing dry run rollback..."
          else
            echo "üöÄ Executing rollback to version ${{ needs.validate-rollback.outputs.target_version }}..."
          fi
          
          # Execute rollback
          ./scripts/rollback.sh $rollback_flags

      - name: Validate rollback
        if: inputs.dry_run != true
        run: |
          echo "üîç Validating rollback..."
          ./scripts/rollback-validation.sh \
            -e staging \
            -v "${{ needs.validate-rollback.outputs.target_version }}" \
            --timeout 300

      - name: Update rollback status
        if: always() && inputs.dry_run != true
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            status="success"
            echo "‚úÖ Rollback completed successfully"
          else
            status="failed"
            echo "‚ùå Rollback failed"
          fi
          
          # Create rollback record
          rollback_metadata=$(cat << EOF
          {
            "rollback_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "staging",
            "target_version": "${{ needs.validate-rollback.outputs.target_version }}",
            "target_sha": "${{ needs.validate-rollback.outputs.target_sha }}",
            "trigger_reason": "${{ inputs.trigger_reason }}",
            "triggered_by": "${{ github.actor }}",
            "workflow_run_id": "${{ github.run_id }}",
            "rollback_status": "$status"
          }
          EOF
          )
          
          echo "$rollback_metadata" | aws s3 cp - \
            "s3://${{ needs.validate-rollback.outputs.artifacts_bucket }}/rollbacks/staging/rollback-$(date +%Y%m%d-%H%M%S).json"

  rollback-production:
    name: Rollback Production Environment
    runs-on: ubuntu-latest
    needs: validate-rollback
    if: inputs.environment == 'production' && needs.validate-rollback.outputs.can_rollback == 'true'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions-Rollback-Production
          aws-region: ${{ env.AWS_REGION }}

      - name: Production rollback confirmation
        run: |
          echo "‚ö†Ô∏è  PRODUCTION ROLLBACK INITIATED"
          echo "Target Version: ${{ needs.validate-rollback.outputs.target_version }}"
          echo "Target SHA: ${{ needs.validate-rollback.outputs.target_sha }}"
          echo "Trigger Reason: ${{ inputs.trigger_reason }}"
          echo "Triggered By: ${{ github.actor }}"
          
          if [[ "${{ inputs.trigger_reason }}" == "deployment_failure" ]]; then
            echo "üö® Automatic rollback due to deployment failure"
            echo "Failed Version: ${{ inputs.failed_version }}"
          fi

      - name: Execute rollback
        run: |
          chmod +x scripts/*.sh
          
          # Determine rollback flags
          rollback_flags="-e production"
          
          if [[ -n "${{ needs.validate-rollback.outputs.target_version }}" ]]; then
            rollback_flags="$rollback_flags -v ${{ needs.validate-rollback.outputs.target_version }}"
          fi
          
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            rollback_flags="$rollback_flags --dry-run"
            echo "üîç Performing dry run rollback..."
          else
            echo "üöÄ Executing production rollback to version ${{ needs.validate-rollback.outputs.target_version }}..."
          fi
          
          # Execute rollback
          ./scripts/rollback.sh $rollback_flags

      - name: Validate rollback
        if: inputs.dry_run != true
        run: |
          echo "üîç Validating production rollback..."
          ./scripts/rollback-validation.sh \
            -e production \
            -v "${{ needs.validate-rollback.outputs.target_version }}" \
            --timeout 600

      - name: Run production smoke tests
        if: inputs.dry_run != true
        run: |
          cd app
          npm ci
          npm run test:smoke -- --env=production

      - name: Update rollback status
        if: always() && inputs.dry_run != true
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            status="success"
            echo "‚úÖ Production rollback completed successfully"
          else
            status="failed"
            echo "‚ùå Production rollback failed"
          fi
          
          # Create rollback record
          rollback_metadata=$(cat << EOF
          {
            "rollback_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "production",
            "target_version": "${{ needs.validate-rollback.outputs.target_version }}",
            "target_sha": "${{ needs.validate-rollback.outputs.target_sha }}",
            "trigger_reason": "${{ inputs.trigger_reason }}",
            "triggered_by": "${{ github.actor }}",
            "workflow_run_id": "${{ github.run_id }}",
            "rollback_status": "$status",
            "failed_version": "${{ inputs.failed_version }}"
          }
          EOF
          )
          
          echo "$rollback_metadata" | aws s3 cp - \
            "s3://${{ needs.validate-rollback.outputs.artifacts_bucket }}/rollbacks/production/rollback-$(date +%Y%m%d-%H%M%S).json"

      - name: Notify rollback completion
        if: always() && inputs.dry_run != true
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "üéâ Production rollback to ${{ needs.validate-rollback.outputs.target_version }} completed successfully!"
          else
            echo "üí• Production rollback failed! Manual intervention may be required."
          fi

  notify-rollback:
    name: Notify Rollback Status
    runs-on: ubuntu-latest
    needs: [validate-rollback, rollback-staging, rollback-production]
    if: always() && needs.validate-rollback.outputs.can_rollback == 'true'
    
    steps:
      - name: Determine rollback result
        run: |
          if [[ "${{ inputs.environment }}" == "staging" ]]; then
            job_status="${{ needs.rollback-staging.result }}"
          else
            job_status="${{ needs.rollback-production.result }}"
          fi
          
          echo "Environment: ${{ inputs.environment }}"
          echo "Target Version: ${{ needs.validate-rollback.outputs.target_version }}"
          echo "Rollback Status: $job_status"
          echo "Trigger Reason: ${{ inputs.trigger_reason }}"
          
          if [[ "$job_status" == "success" ]]; then
            echo "‚úÖ Rollback completed successfully"
          else
            echo "‚ùå Rollback failed or was cancelled"
          fi